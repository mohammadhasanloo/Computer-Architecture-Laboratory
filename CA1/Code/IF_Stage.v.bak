module Mux2To1 #(
    parameter N = 32
)(
    input [N-1:0] a0, a1,
    input sel,
    output [N-1:0] out
);
    assign out = sel ? a1 : a0;
endmodule

module InstructionMemory #(
    parameter Count = 1024
)(
    input [31:0] pc,
    output reg [31:0] inst
);
    wire [31:0] adr;
    assign adr = {pc[31:2], 2'b00}

endmodule


module Adder #(
    parameter N = 32
)(
    input [N-1:0] a, b,
    output [N-1:0] out
);
    assign out = a + b;
endmodule


module IF_Stage(
    input clk, rst,
    input branch_taken, freeze,
    input [31:0] branchAddr,
    output [31:0] PC, Instruction
);
    wire [31:0] pcRegIn, pcRegOut, pcAdderOut;

    Register #(32) pcReg(
        .clk(clk),
        .rst(rst),
        .in(pcRegIn),
        .ld(~freeze),
        .clr(1'b0),
        .out(pcRegOut)
    );

    // Adder #(32) pcAdder(
    //     .a(pcRegOut),
    //     .b(32'd4),
    //     .out(pcAdderOut)
    // );

    // Mux2To1 #(32) pcMux(
    //     .a0(pcAdderOut),
    //     .a1(branchAddr),
    //     .sel(branchTaken),
    //     .out(pcRegIn)
    // );

    
endmodule
